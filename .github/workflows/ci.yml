name: "[ISDM] Dashboard integration"

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "main"

env:
  REGISTRY: ghcr.io
  DOCKERFILE_CONTEXT: "." # Build's context is the set of files located in the specified PATH or URL (default Git context)
  DOCKERFILE_TARGET: "production" # Sets the target stage to build
  DOCKERFILE_FILE: "Dockerfile" # Path to the Dockerfile. (default {context}/Dockerfile)

jobs:
  install_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm & next.js cache
        with:
          path: |
            ${{ env.STORE_PATH }}
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install

      - name: Check linting
        run: pnpm lint

  scan-dockerfile:
    name: Security analyse Dockerfile
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v3

      - name: Run kics Scan
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: ${{ env.DOCKERFILE_CONTEXT }}/${{ env.DOCKERFILE_FILE }}
          fail_on: high
          output_path: "results"
          output_formats: "sarif"

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/results.sarif

  build-and-push-image:
    name: Build and publish image
    runs-on: ubuntu-latest
    needs:
      - install_lint
      - scan-dockerfile

    permissions:
      packages: write

    steps:
      - uses: actions/checkout@v3

      ## Authenticate to registry repo github
      ##
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      ## Build and push Docker image
      ##
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.DOCKERFILE_CONTEXT }}
          file: ${{ env.DOCKERFILE_CONTEXT }}/${{ env.DOCKERFILE_FILE }}
          target: ${{ env.DOCKERFILE_TARGET }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}:buildcache,mode=max
